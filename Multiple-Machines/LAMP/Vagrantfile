# This snippet helps joining the existing vbox private network (vboxnet1, in our case, because "vboxnet1" is indicated bellow on the network card setup) if it is the case. Overwise it is going to create a new vboxnetN private network. The snippet should be inserted at the top of the Vagrantfile
class VagrantPlugins::ProviderVirtualBox::Action::Network
    def dhcp_server_matches_config?(dhcp_server, config)
      true
    end
  end
  
  
Vagrant.configure("2") do |config|

    config.vm.define "apache" do |apache|
        apache.vm.box = "ubuntu/xenial64"
        apache.vm.hostname = 'apache'
        # apache.vm.box_url = "ubuntu/xenial64"
        apache.vm.box_check_update = false
    
        # Define allowed port range assignable by Vagrant when port collision is detected and the "auto_correct: true" is indicated on the specific record
        apache.vm.usable_port_range = 2201..8999
    
        apache.vm.synced_folder "~/Drives/Vagrant", "/vagrant_data", owner: "vagrant", group: "vagrant", automount: true

        # this configuration is indicated as a second network interface
        apache.vm.network "private_network", :type => 'dhcp', :name => 'vboxnet2', :adapter => 3
        apache.vm.network "private_network", ip: "10.205.205.15"
        # apache.vm.network :private_network, ip: "192.168.56.101"
        apache.vm.network "forwarded_port", guest: 22, host: 2215, auto_correct: true, id: "ssh"
        apache.vm.network "forwarded_port", guest: 80, host: 8015, auto_correct: true


        # Disable inserting autogenerated vagrant ssh public key
        apache.ssh.insert_key = false
        # Indicate Vagrant to use a particular private key, then if there is no key to use the Vagrant's default insecure private key. This procedure also helps Vagrant to log in in the first place, in order to insert that particular key.
        apache.ssh.private_key_path = ["~/.ssh/server", "~/.vagrant.d/insecure_private_key"]
        # Copy that particular key from host into the "authorized_keys" file on guest machine, in the default vagrant user folder
        apache.vm.provision "file", source: "~/.ssh/server.pub", destination: "~/.ssh/authorized_keys"

        apache.vm.provider :virtualbox do |v|
        v.cpus = 1
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--memory", 256]
        v.customize ["modifyvm", :id, "--name", "apache"]
        v.customize ["modifyvm", :id, "--groups", "/Vagrant"]
        v.customize ["modifyvm", :id, "--vram", "9"]
        v.customize ["modifyvm", :id, "--description", "This is an Ubuntu 16.04 machine"]
        v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
        # Enable USB 3.0
        v.customize ["modifyvm", :id, "--usbxhci", "on"]
        # Disable Audio
        v.customize ["modifyvm", :id, "--audio", "none"]
        # Disable floppy boot option
        v.customize ["modifyvm", :id, "--boot1", "none"]
        end

        # config.vm.provision "shell", path: "provision.sh"
        apache.vm.provision "shell", inline: <<-SHELL
        export DEBIAN_FRONTEND=noninteractive
        apt-get -y update
        apt-get -y upgrade
        apt-get -y dist-upgrade
        apt-get -yf install whois mc curl htop glances
        # Do not reboot from inside the machine because after the reboot the shared folders are not mounted. To mount them afterwards one's should "vagrant halt" and "vagrant up" from the host machine.
        # reboot
        SHELL
    end


    config.vm.define "mysql" do |mysql|
        mysql.vm.box = "ubuntu/xenial64"
        mysql.vm.hostname = 'mysql'
        # mysql.vm.box_url = "ubuntu/xenial64"
        mysql.vm.box_check_update = false
    
        # Define allowed port range assignable by Vagrant when port collision is detected and the "auto_correct: true" is indicated on the specific record
        mysql.vm.usable_port_range = 2201..8999
    
        mysql.vm.synced_folder "~/Drives/Vagrant", "/vagrant_data", owner: "vagrant", group: "vagrant", automount: true

        # this configuration is indicated as a second network interface
        mysql.vm.network "private_network", :type => 'dhcp', :name => 'vboxnet2', :adapter => 3
        mysql.vm.network "private_network", ip: "10.205.205.16"
        # mysql.vm.network :private_network, ip: "192.168.56.101"
        mysql.vm.network "forwarded_port", guest: 22, host: 2216, auto_correct: true, id: "ssh"
        mysql.vm.network "forwarded_port", guest: 80, host: 8016, auto_correct: true


        # Disable inserting autogenerated vagrant ssh public key
        mysql.ssh.insert_key = false
        # Indicate Vagrant to use a particular private key, then if there is no key to use the Vagrant's default insecure private key. This procedure also helps Vagrant to log in in the first place, in order to insert that particular key.
        mysql.ssh.private_key_path = ["~/.ssh/server", "~/.vagrant.d/insecure_private_key"]
        # Copy that particular key from host into the "authorized_keys" file on guest machine, in the default vagrant user folder
        mysql.vm.provision "file", source: "~/.ssh/server.pub", destination: "~/.ssh/authorized_keys"

        mysql.vm.provider :virtualbox do |v|
        v.cpus = 1
        v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        v.customize ["modifyvm", :id, "--memory", 256]
        v.customize ["modifyvm", :id, "--name", "mysql"]
        v.customize ["modifyvm", :id, "--groups", "/Vagrant"]
        v.customize ["modifyvm", :id, "--vram", "9"]
        v.customize ["modifyvm", :id, "--description", "This is an Ubuntu 16.04 machine"]
        v.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
        # Enable USB 3.0
        v.customize ["modifyvm", :id, "--usbxhci", "on"]
        # Disable Audio
        v.customize ["modifyvm", :id, "--audio", "none"]
        # Disable floppy boot option
        v.customize ["modifyvm", :id, "--boot1", "none"]
        end

        # config.vm.provision "shell", path: "provision.sh"
        mysql.vm.provision "shell", inline: <<-SHELL
        export DEBIAN_FRONTEND=noninteractive
        apt-get -y update
        apt-get -y upgrade
        apt-get -y dist-upgrade
        apt-get -yf install whois mc curl htop glances
        # Do not reboot from inside the machine because after the reboot the shared folders are not mounted. To mount them afterwards one's should "vagrant halt" and "vagrant up" from the host machine.
        # reboot
        SHELL
    end

end